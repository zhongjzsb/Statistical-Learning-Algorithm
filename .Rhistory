list = FALSE,
times = 1)
segTrain <- segmentationData[trainIndex,]
segTest <- segmentationData[-trainIndex,]
trainX <- segTrain[,4:61]
set.seed(1000)
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated five times
repeats = 5)
svmFit <- train(x = trainX,
y = segTrain$Class,
data = segTrain,
method = "svmLinear",
trControl = fitControl)
install.packages("e1071")
library(caret)
data(segmentationData)
segmentationData %>%
glimpse()
set.seed(100)
trainIndex <- createDataPartition(segmentationData$Class, p = .8,
list = FALSE,
times = 1)
segTrain <- segmentationData[trainIndex,]
segTest <- segmentationData[-trainIndex,]
trainX <- segTrain[,4:61]
set.seed(1000)
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated five times
repeats = 5)
svmFit <- train(x = trainX,
y = segTrain$Class,
data = segTrain,
method = "svmLinear",
trControl = fitControl)
svmFit
segPred <- predict(svmFit, segTest[,4:61])
segPred
confusionMatrix(data = segPred, reference = segTest$Class)
postResample(pred = segPred, obs = segTest$Class)
## SUPPORT VECTOR MACHINE MODEL
# First pass
set.seed(1492)
# Setup for cross validation
ctrl <- trainControl(method="repeatedcv",   # 10fold cross validation
repeats=5,		    # do 5 repititions of cv
summaryFunction=twoClassSummary,	# Use AUC to pick the best model
classProbs=TRUE)
#Train and Tune the SVM
svm.tune <- train(x =trainX,
y = segTrain$Class,
method = "svmRadial",   # Radial kernel
tuneLength = 9,					# 9 values of the cost function
preProc = c("center","scale"),  # Center and scale data
metric = "ROC",
trControl = ctrl)
## SUPPORT VECTOR MACHINE MODEL
# First pass
set.seed(1492)
# Setup for cross validation
ctrl <- trainControl(method="repeatedcv",   # 10fold cross validation
repeats=2,		    # do 2 repititions of cv
summaryFunction=twoClassSummary,	# Use AUC to pick the best model
classProbs=TRUE)
#Train and Tune the SVM
svm.tune <- train(x =trainX,
y = segTrain$Class,
method = "svmRadial",   # Radial kernel
tuneLength = 9,					# 9 values of the cost function
preProc = c("center","scale"),  # Center and scale data
metric = "ROC",
trControl = ctrl)
svm.tune
install.packages("doParallel")
library(doParallel)
library(doParallel)
#create a list of seed, here change the seed for each resampling
set.seed(123)
seeds <- vector(mode = "list", length = 11)#length is = (n_repeats*nresampling)+1
for(i in 1:10) seeds[[i]]<- sample.int(n=1000, 3) #(3 is the number of tuning parameter, mtry for rf, here equal to ncol(iris)-2)
seeds[[11]]<-sample.int(1000, 1)#for the last model
#control list
myControl <- trainControl(method='cv', seeds=seeds, index=createFolds(iris$Species))
#run model in parallel
cl <- makeCluster(detectCores())
registerDoParallel(cl)
model1 <- train(Species~., iris, method='rf', trControl=myControl)
model2 <- train(Species~., iris, method='rf', trControl=myControl)
stopCluster(cl)
#compare
all.equal(predict(model1, type='prob'), predict(model2, type='prob'))
library(doParallel)
#create a list of seed, here change the seed for each resampling
set.seed(123)
seeds <- vector(mode = "list", length = 11)#length is = (n_repeats*nresampling)+1
for(i in 1:10) seeds[[i]]<- sample.int(n=1000, 3) #(3 is the number of tuning parameter, mtry for rf, here equal to ncol(iris)-2)
seeds[[11]]<-sample.int(1000, 1)#for the last model
#control list
myControl <- trainControl(method='cv', seeds=seeds, index=createFolds(iris$Species))
#run model in parallel
cl <- makeCluster(detectCores())
registerDoParallel(cl)
model1 <- train(Species~., iris, method='rf', trControl=myControl)
model2 <- train(Species~., iris, method='rf', trControl=myControl)
stopCluster(cl)
#compare
all.equal(predict(model1, type='prob'), predict(model2, type='prob'))
seeds
createFolds(iris$Species)
?trainControl
?train
library(doParallel)
#create a list of seed, here change the seed for each resampling
set.seed(123)
seeds <- vector(mode = "list", length = 11)#length is = (n_repeats*nresampling)+1
for(i in 1:10) seeds[[i]]<- sample.int(n=1000, 3) #(3 is the number of tuning parameter, mtry for rf, here equal to ncol(iris)-2)
seeds[[11]]<-sample.int(1000, 1)#for the last model
#control list
myControl <- trainControl(method='cv', seeds=seeds, index=createFolds(iris$Species))
#run model in parallel
cl <- makeCluster(detectCores())
registerDoParallel(cl)
model1 <- train(Species~., iris, method='rf', trControl=myControl)
model2 <- train(Species~., iris, method='rf', trControl=myControl)
stopCluster(cl)
#compare
all.equal(predict(model1, type='prob'), predict(model2, type='prob'))
library(caret)
data(segmentationData)
segmentationData %>%
glimpse(5)
set.seed(100)
trainIndex <- createDataPartition(segmentationData$Class, p = .8,
list = FALSE,
times = 1)
segTrain <- segmentationData[trainIndex,]
segTest <- segmentationData[-trainIndex,]
trainX <- segTrain[,4:61]
set.seed(1000)
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated five times
repeats = 5)
svmFit <- train(x = trainX,
y = segTrain$Class,
data = segTrain,
method = "svmLinear",
trControl = fitControl)
segmentationData %>%
head(10)
library(caret)
data(segmentationData)
segmentationData %>%
head(10)
set.seed(100)
trainIndex <- createDataPartition(segmentationData$Class, p = .8,
list = FALSE,
times = 1)
segTrain <- segmentationData[trainIndex,]
segTest <- segmentationData[-trainIndex,]
trainX <- segTrain[,4:61]
set.seed(1000)
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated five times
repeats = 5)
svmFit <- train(x = trainX,
y = segTrain$Class,
data = segTrain,
method = "svmLinear",
trControl = fitControl)
segTrain
svmFit <- train(x = trainX,
y = segTrain$Class,
# data = segTrain,
method = "svmLinear",
trControl = fitControl)
segTrain <- segmentationData[trainIndex,]
segTest <- segmentationData[-trainIndex,]
trainX <- segTrain[,4:61]
set.seed(1000)
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated five times
repeats = 5)
svmFit <- train(x = trainX,
y = segTrain$Class,
data = segTrain,
method = "svmLinear",
trControl = fitControl)
library(caret)
data(segmentationData)
segmentationData %>%
head(10)
set.seed(100)
trainIndex <- createDataPartition(segmentationData$Class, p = .8,
list = FALSE,
times = 1)
segTrain <- segmentationData[trainIndex,]
segTest <- segmentationData[-trainIndex,]
trainX <- segTrain[,4:61]
set.seed(1000)
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated five times
repeats = 5)
svmFit <- train(x = trainX,
y = segTrain$Class,
data = segTrain,
method = "svmLinear",
trControl = fitControl)
svmFit
segPred <- predict(svmFit, segTest[,4:61])
segPred %>%
head(10)
confusionMatrix(data = segPred, reference = segTest$Class)
postResample(pred = segPred, obs = segTest$Class)
library(e1071)
day = c(0,1,2,3,4,5,6)
weather = c(1,0,0,0,0,0,0)
happy = factor(c(T,F,F,F,F,F,F))
d = data.frame(day=day, weather=weather, happy=happy)
model = svm(happy ~ day + weather, data = d)
plot(model, d)
model
d
?svm
library(caret)
data(segmentationData)
segmentationData %>%
head(10)
set.seed(100)
trainIndex <- createDataPartition(segmentationData$Class, p = .8,
list = FALSE,
times = 1)
segTrain <- segmentationData[trainIndex,]
segTest <- segmentationData[-trainIndex,]
trainX <- segTrain[,4:61]
set.seed(1000)
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated five times
repeats = 5)
svmFit <- train(x = trainX,
y = segTrain$Class,
data = segTrain,
method = "svmLinear",
trControl = fitControl)
svmFit
plot(svmFit)
svmFit$method
svmFit$results
svmFit$control
model
str(model)
plot(model)
plot(model, d)
?plot.svm
data(cats, package = "MASS")
m <- svm(Sex~., data = cats)
plot(m, cats)
cats
library(e1071)
data(cats, package = "MASS")
m <- svm(Sex~., data = cats)
plot(m, cats)
library(e1071)
data(cats, package = "MASS")
m <- svm(Sex~., data = cats)
plot(m, cats)
plot.svm
?plot.svm
plot.svm
data(iris)
m2 <- svm(Species~., data = iris)
plot(m2, iris, Petal.Width ~ Petal.Length,
slice = list(Sepal.Width = 3, Sepal.Length = 4))
plot(svmFit)
?plot.train
library(klaR)
rdaFit <- train(Species ~ .,
data = iris,
method = "rda",
control = trainControl(method = "cv"))
library(klaR)
rdaFit <- train(Species ~ .,
data = iris,
method = "rda",
control = trainControl(method = "cv"))
plot(rdaFit)
library(klaR)
rdaFit <- train(Species ~ .,
data = iris,
method = "rda",
control = trainControl(method = "repeatedcv"))
plot(rdaFit)
library(klaR)
rdaFit <- train(Species ~ .,
data = iris,
method = "rda",
control = trainControl(method = "repeatedcv", number = 10))
plot(rdaFit)
library(klaR)
rdaFit <- train(Species ~ .,
data = iris,
method = "rda",
control = trainControl(method = "repeatedcv", number = 10, repeats = 5))
plot(rdaFit)
plot(svmFIt)
plot(svmFit)
svmFit <- train(x = trainX,
y = segTrain$Class,
data = segTrain,
method = "svmLinear",
trControl = fitControl,
tuneLength = 15)
svmFit <- train(x = trainX,
y = segTrain$Class,
data = segTrain,
method = "svmLinear",
trControl = fitControl,
tuneLength = 15)
svmFit
plot(svmFit)
svmFit <- train(x = trainX,
y = segTrain$Class,
data = segTrain,
method = "rda",
trControl = fitControl,
tuneLength = 15)
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 1,
## repeated five times
repeats = 1)
svmFit <- train(x = trainX,
y = segTrain$Class,
data = segTrain,
method = "rda",
trControl = fitControl,
tuneLength = 15)
svmFit
plot(svmFit)
library(e1071)
data(cats, package = "MASS")
m <- svm(Sex~., data = cats)
plot(m, cats)
library(klaR)
rdaFit <- train(Species ~ .,
data = iris,
method = "rda",
control = trainControl(method = "cv"))
plot(rdaFit)
plot(rdaFit, plotType = "level")
ggplot(rdaFit) + theme_bw()
plot(rdaFit) + theme_bw()
library(e1071)
data(cats, package = "MASS")
m <- svm(Sex~., data = cats)
plot(m, cats)
library(klaR)
rdaFit <- train(Species ~ .,
data = iris,
method = "rda",
control = trainControl(method = "cv"))
plot(rdaFit)
plot(rdaFit, plotType = "level")
ggplot(rdaFit) + theme_bw()
rdaFit <- train(Species ~ .,
data = iris,
method = "svm",
control = trainControl(method = "cv"))
rdaFit <- train(Species ~ .,
data = iris,
method = "svmLinear",
control = trainControl(method = "cv"))
plot(rdaFit)
rdaFit <- train(Species ~ .,
data = iris,
method = "svmRadial",
control = trainControl(method = "cv"))
plot(rdaFit, plotType = "level")
ggplot(rdaFit) + theme_bw()
library(e1071)
data(cats, package = "MASS")
m <- svm(Sex~., data = cats)
plot(m, cats)
svmRadialFit <- train(Species ~ .,
data = iris,
method = "svmRadial",
control = trainControl(method = "cv"))
plot(svmRadialFit)
plot(svmRadialFit, plotType = "level")
library(e1071)
data(cats, package = "MASS")
m <- svm(Sex~., data = cats)
plot(m, cats)
svmRadialFit <- train(Species ~ .,
data = iris,
method = "svmRadial",
control = trainControl(method = "cv"))
plot(svmRadialFit)
ggplot(svmRadialFit) + theme_bw()
svmRadialFit$metric
plot(svmRadialFit, metric = svmRadialFit$metric)
svmRadialFit <- train(Species ~ .,
data = iris,
method = "svmRadial",
metric = "RMSE",
control = trainControl(method = "cv"))
svmRadialFit <- train(Species ~ .,
data = iris,
method = "svmRadial",
metric = "Rsquared",
control = trainControl(method = "cv"))
svmRadialFit <- train(Species ~ .,
data = iris,
method = "svmRadial",
metric = "Kappa",
control = trainControl(method = "cv"))
plot(svmRadialFit, metric = svmRadialFit$metric)
ggplot(svmRadialFit) + theme_bw()
library(caret)
data(segmentationData)
segmentationData %>%
head(10)
set.seed(100)
trainIndex <- createDataPartition(segmentationData$Class, p = .8,
list = FALSE,
times = 1)
segTrain <- segmentationData[trainIndex,]
segTest <- segmentationData[-trainIndex,]
trainX <- segTrain[,4:61]
set.seed(1000)
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated five times
repeats = 5)
svmFit <- train(x = trainX,
y = segTrain$Class,
data = segTrain,
method = "svmLinear",
trControl = fitControl,
tuneLength = 15)
svmFit
segPred <- predict(svmFit, segTest[,4:61])
segPred %>%
head(10)
confusionMatrix(data = segPred, reference = segTest$Class)
postResample(pred = segPred, obs = segTest$Class)
library(e1071)
data(cats, package = "MASS")
m <- svm(Sex~., data = cats)
plot(m, cats)
svmRadialFit <- train(Species ~ .,
data = iris,
method = "svmRadial",
metric = "Kappa ",
control = trainControl(method = "cv"))
plot(svmRadialFit, metric = svmRadialFit$metric)
ggplot(svmRadialFit) + theme_bw()
## SUPPORT VECTOR MACHINE MODEL
# First pass
set.seed(1492)
# Setup for cross validation
ctrl <- trainControl(method="repeatedcv",   # 10fold cross validation
repeats=2,		    # do 2 repititions of cv
summaryFunction=twoClassSummary,	# Use AUC to pick the best model
classProbs=TRUE)
#Train and Tune the SVM
svm.tune <- train(x =trainX,
y = segTrain$Class,
method = "svmRadial",   # Radial kernel
tuneLength = 9,					# 9 values of the cost function
preProc = c("center","scale"),  # Center and scale data
metric = "ROC",
trControl = ctrl)
svm.tune
# load the package
library(kernlab)
# load data
data(longley)
# fit model
fit <- ksvm(Employed~., longley)
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, longley)
# summarize accuracy
rmse <- mean((longley$Employed - predictions)^2)
print(rmse)
library(e1071)
data(cats, package = "MASS")
m <- svm(Sex~., data = cats)
plot(m, cats)
svmRadialFit <- train(Species ~ .,
data = iris,
method = "svmRadial",
metric = "Kappa",
control = trainControl(method = "cv"))
plot(svmRadialFit, metric = svmRadialFit$metric)
ggplot(svmRadialFit) + theme_bw()
