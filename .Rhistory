repeats = 2)
rfFit <- train(x = trainX,
y = segTrain$Class,
data = segTrain,
method = "rf",
trControl = fitControl,
tuneLength = 10)
rfFit <- train(x = trainX,
y = segTrain$Class,
data = segTrain,
method = "rf",
trControl = fitControl,
tuneLength = 10)
rfFit
ggplot(rfFit) + theme_bw()
data(Sacramento)
Sacramento %>%
head(10)
set.seed(100)
trainIndex <- createDataPartition(Sacramento$speed, p = .8,
list = FALSE,
times = 1)
Sacramento %>%
head(10)
trainIndex <- createDataPartition(Sacramento$price, p = .8,
list = FALSE,
times = 1)
sacTrain <- Sacramento[trainIndex,]
sacTest <- Sacramento[-trainIndex,]
trainX <- sacTrain[,-'price']
Sacramento %>%
head(10)
trainX <- sacTrain[,-7]
trainX
set.seed(1000)
fitControl <- trainControl(## 5-fold CV
method = "repeatedcv",
number = 5,
## repeated two times
repeats = 2)
cl <- makeCluster(detectCores())
cl <- makeCluster(detectCores())
registerDoParallel(cl)
lmFit <- train(x = trainX,
y = sacTrain$Class,
data = sacTrain,
method = "lm",
trControl = fitControl,
tuneLength = 10)
cl <- makeCluster(detectCores())
cl <- makeCluster(detectCores())
registerDoParallel(cl)
lmFit <- train(x = trainX,
y = sacTrain$price,
data = sacTrain,
method = "lm",
trControl = fitControl,
tuneLength = 10)
lmFit <- train(x = trainX,
y = sacTrain$price,
data = sacTrain,
method = "lm",
trControl = fitControl)
Sacramento %>%
head(10)
trainX <- sacTrain['beds']
trainX <- sacTrain['beds', 'sqft']
sacTrain
trainX <- sacTrain['beds', 'sqft', 'baths', 'zip']
Sacramento %>%
head(10)
trainX <- sacTrain['beds', 'sqft', 'baths', 'latitude', 'longitude']
trainX <- sacTrain['beds', 'sqft', 'baths']
trainX <- sacTrain[c('beds', 'sqft', 'baths', 'latitude', 'longitude')]
trainX
data(Sacramento)
Sacramento %>%
head(10)
set.seed(100)
trainIndex <- createDataPartition(Sacramento$price, p = .8,
list = FALSE,
times = 1)
sacTrain <- Sacramento[trainIndex,]
sacTest <- Sacramento[-trainIndex,]
trainX <- sacTrain[c('beds', 'sqft', 'baths', 'latitude', 'longitude')]
set.seed(1000)
fitControl <- trainControl(## 5-fold CV
method = "repeatedcv",
number = 5,
## repeated two times
repeats = 2)
cl <- makeCluster(detectCores())
registerDoParallel(cl)
lmFit <- train(x = trainX,
y = sacTrain$price,
data = sacTrain,
method = "lm",
trControl = fitControl)
lm(sacTrain$price~trainX)
str(trainX)
str(sacTrain)
na.omit(sacTrain)
str(na.omit(sacTrain))
lm(sacTrain$price~trainX)
lm(sacTrain$price~sacTrain$beds)
getModelInfo('lm', regex = FALSE)
lmFit <- train(x = trainX$beds,
y = sacTrain$price,
data = sacTrain,
method = "lm",
trControl = fitControl)
lmFit <- train(x = trainX$beds,
y = sacTrain$price,
data = sacTrain,
method = "lm")
lmFit <- train(x = trainX$beds,
y = sacTrain$price,
data = sacTrain,
method = "lm",
metric = "RMSE",
trControl = fitControl)
lmFit <- train(x = trainX$beds,
y = sacTrain$price,
data = sacTrain,
method = "lm",
metric = "RMSE")
lmFit
lmFit <- train(x = trainX$beds,
y = sacTrain$price,
method = "lm",
metric = "RMSE")
data(Sacramento)
Sacramento %>%
head(10)
trainIndex <- createDataPartition(Sacramento$price, p = .8,
list = FALSE,
times = 1)
sacTrain <- Sacramento[trainIndex,]
trainX <- sacTrain[c('beds', 'sqft', 'baths', 'latitude', 'longitude')]
lmFit <- train(x = trainX$beds,
y = sacTrain$price,
method = "lm",
metric = "RMSE")
trainX$beds
sacTrain$price
lm(sacTrain~trainX$beds)
lm(sacTrain$price~trainX$beds)
lmFit <- train(x = trainX$beds,
y = sacTrain$price,
method = "lm",
metric = "RMSE")
sacTrain
trainX
Xs       <- matrix(rnorm(300*20), nrow = 300, ncol = 20)
Yvec     <- rnorm(300)
## Make traincontrol, cv of "none"
tcontrol <- trainControl(method = "none")
## Fit lm model using train
fit      <- train(x= Xs, y = Yvec, method = "lm", metric = "RMSE", trControl = tcontrol)
fit
lmFit <- train(x = trainX$beds,
y = sacTrain$price,
method = "lm",
metric = "RMSE")
trainX$beds
sacTrain$price
lmFit <- train(x = Sacramento$beds,
y = Sacramento$price,
method = "lm",
metric = "RMSE")
lmFit <- train(x = Sacramento$beds,
y = Sacramento$price,
method = "lm",
metric = "RMSE",
trControl = trainControl(method = "none"))
lmFit
str(Sacramento$price)
str(Sacramento$beds)
lmFit <- train(x = as.numeric(Sacramento$beds),
y = as.numeric(Sacramento$price),
method = "lm",
metric = "RMSE",
trControl = trainControl(method = "none"))
lmFit
Xs       <- matrix(rnorm(300*20), nrow = 300, ncol = 20)
Yvec     <- rnorm(300)
tcontrol <- trainControl(method = "none")
fit      <- train(x= Xs, y = Yvec, method = "lm", metric = "RMSE", trControl = tcontrol)
fit
Xs
str(Xs)
str(Yvec)
as.numeric(Sacramento$price)
fit      <- train(x= as.numeric(Sacramento$beds), y = Sacramento$price, method = "lm", metric = "RMSE", trControl = tcontrol)
str(sacTrain$price)
lmFit <- train(x = sacTrain$beds,
y = sacTrain$price,
method = "lm",
metric = "RMSE",
trControl = trainControl(method = "none"))
lmFit <- train(x = sacTrain,
y = sacTrain$price,
method = "lm",
metric = "RMSE",
trControl = trainControl(method = "none"))
lmFit
Xs       <- matrix(rnorm(300*4), nrow = 300, ncol = 4)
tcontrol <- trainControl(method = "none")
fit
Xs       <- matrix(rnorm(300*1), nrow = 300, ncol = 1)
Yvec     <- rnorm(300)
tcontrol <- trainControl(method = "none")
fit
Xs
Y
fit
fit      <- train(x= Xs, y = Yvec, method = "lm", metric = "RMSE", trControl = tcontrol)
fit
lmFit <- train(x = trainX,
y = sacTrain$price,
method = "lm",
metric = "RMSE",
trControl = trainControl(method = "none"))
lmFit
lmFit <- train(x = trainX,
y = sacTrain$price,
method = "lm",
metric = "RMSE",
trControl = fitControl)
lmFit
cl <- makeCluster(detectCores())
cl <- makeCluster(detectCores())
registerDoParallel(cl)
lmFit <- train(x = trainX,
y = sacTrain$price,
method = "lm",
metric = "RMSE",
trControl = fitControl)
lmFit
lmFit <- train(x = trainX,
y = sacTrain$price,
method = "lm",
metric = "RMSE",
trControl = fitControl)
lmFit
cl <- makeCluster(detectCores())
registerDoParallel(cl)
lmFit <- train(x = trainX,
y = sacTrain$price,
method = "lm",
metric = "RMSE",
trControl = fitControl)
lmFit
data(Sacramento)
Sacramento %>%
head(10)
set.seed(100)
trainIndex <- createDataPartition(Sacramento$price, p = .8,
list = FALSE,
times = 1)
sacTrain <- Sacramento[trainIndex,]
sacTest <- Sacramento[-trainIndex,]
trainX <- sacTrain[c('beds', 'sqft', 'baths', 'latitude', 'longitude')]
set.seed(1000)
fitControl <- trainControl(## 5-fold CV
method = "repeatedcv",
number = 5,
## repeated two times
repeats = 2)
lmFit <- train(x = trainX,
y = sacTrain$price,
method = "lm",
metric = "RMSE",
trControl = fitControl)
lmFit
getModelInfo("nnet")
str(getModelInfo("nnet"))
data(segmentationData)
getModelInfo("nnet")
segmentationData %>%
head(10)
set.seed(100)
trainIndex <- createDataPartition(segmentationData$Class, p = .8,
list = FALSE,
times = 1)
segTrain <- segmentationData[trainIndex,]
segTest <- segmentationData[-trainIndex,]
trainX <- segTrain[,4:61]
set.seed(1000)
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated five times
repeats = 5)
neuralFit <- train(x = trainX,
y = segTrain$Class,
data = segTrain,
method = "nnet",
trControl = fitControl)
install.packages("doParallel")
%>%
data(segmentationData)
segmentationData %>%
head(10)
data(segmentationData)
segmentationData %>%
head(10)
set.seed(100)
trainIndex <- createDataPartition(segmentationData$Class, p = .8,
list = FALSE,
times = 1)
segTrain <- segmentationData[trainIndex,]
segTest <- segmentationData[-trainIndex,]
trainX <- segTrain[,4:61]
set.seed(1000)
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated five times
repeats = 5)
svmFit <- train(x = trainX,
y = segTrain$Class,
data = segTrain,
method = "svmLinear",
trControl = fitControl)
svmFit
segPred <- predict(svmFit, segTest[,4:61])
segPred %>%
head(10)
confusionMatrix(data = segPred, reference = segTest$Class)
postResample(pred = segPred, obs = segTest$Class)
library(e1071)
data(cats, package = "MASS")
m <- svm(Sex~., data = cats)
plot(m, cats)
svmRadialFit <- train(Species ~ .,
data = iris,
method = "svmRadial",
metric = "Kappa",
control = trainControl(method = "cv"))
plot(svmRadialFit, metric = svmRadialFit$metric)
ggplot(svmRadialFit) + theme_bw()
## SUPPORT VECTOR MACHINE MODEL
# First pass
set.seed(1492)
# Setup for cross validation
ctrl <- trainControl(method="repeatedcv",   # 10fold cross validation
repeats=2,		    # do 2 repititions of cv
summaryFunction=twoClassSummary,	# Use AUC to pick the best model
classProbs=TRUE)
#Train and Tune the SVM
svm.tune <- train(x =trainX,
y = segTrain$Class,
method = "svmRadial",   # Radial kernel
tuneLength = 9,					# 9 values of the cost function
preProc = c("center","scale"),  # Center and scale data
metric = "ROC",
trControl = ctrl)
svm.tune
# load the package
library(kernlab)
# load data
data(longley)
# fit model
fit <- ksvm(Employed~., longley)
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, longley)
# summarize accuracy
rmse <- mean((longley$Employed - predictions)^2)
print(rmse)
install.packages("printr")
library(printr)
install.packages(
'printr',
type = 'source',
repos = c('http://yihui.name/xran', 'http://cran.rstudio.com')
)
library(printr)
data(segmentationData)
data(segmentationData)
segmentationData
vignette('printr', package = 'printr')
head(mtcars)
mtcars
options(digits = 4)
set.seed(123)
x = matrix(rnorm(40), 5)
x
x
x
library(ktable)
library(kable)
install.packages("kable")
library(knitr)
kable(x)
x
kable(mtcars)
?coef
spam
data(spam)
spam
str(spam)
svmFit$finalModel
data()
svmLinearInfo <- getModelInfo("svmLinear", regex = FALSE)
svmLinearInfo[[1]] %>%
glimpse()
svmLinearInfo[[1]] %>%
glimpse()
svmLinearInfo <- getModelInfo("svmLinear", regex = FALSE)
svmLinearInfo[[1]] %>%
glimpse()
svmLinearInfo <- getModelInfo("svmLinear", regex = FALSE)
svmLinearInfo[[1]] %>%
glimpse()
data()
svmLinearInfo <- getModelInfo("svmLinear", regex = FALSE)
svmLinearInfo[[1]] %>%
glimpse()
plot(mtcars)
data()
svmLinearInfo <- getModelInfo("svmLinear", regex = FALSE)
svmLinearInfo[[1]] %>%
glimpse()
plot(mtcars)
data()
svmLinearInfo <- getModelInfo("svmLinear", regex = FALSE)
svmLinearInfo[[1]] %>%
glimpse()
plot(mtcars)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
install.packages("AppliedPredictiveModeling")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
data(AlzheimerDisease)
set.seed(3433)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
rfFit
data(segmentationData)
segmentationData %>%
head(10)
set.seed(100)
trainIndex <- createDataPartition(segmentationData$Class, p = .8,
list = FALSE,
times = 1)
segTrain <- segmentationData[trainIndex,]
segTest <- segmentationData[-trainIndex,]
trainX <- segTrain[,4:61]
set.seed(1000)
fitControl <- trainControl(## 5-fold CV
method = "repeatedcv",
number = 5,
## repeated two times
repeats = 2)
rfFit <- train(x = trainX,
y = segTrain$Class,
data = segTrain,
method = "rf",
trControl = fitControl,
tuneLength = 10)
rfFit
ggplot(rfFit) + theme_bw()
getTree(rfFit$finalModel, k =2)
rfFit$finalModel
confusionMatrix(segTest$Class, predict(rfFit, segTest))
getTree(rfFit$finalModel)
str(getTree(rfFit$finalModel))
str(getTree(rfFit$finalModel, k =10))
?getTree
table(segTest$Class, predict(rfFit, segTest))
kable(segTest$Class, predict(rfFit, segTest))
table(segTest$Class, predict(rfFit, segTest))
ftable(segTest$Class, predict(rfFit, segTest))
table(segTest$Class, predict(rfFit, segTest))
l;s
ls
getwd()
ls()
?library
require
require("abcd")
install.packages("sos")
sos::back2ForwardSlash("C:\U")
Quote("\U")
Quotes("\U")
cat("\U")
rep('especially', 2)
install.packages("Hmisc")
library(Hmisc)
string <- "this\\(system) {is} [full]."
escapeRegex(string)
escapeBS(string)
escapeBS("\U")
install.packages("littler")
install.packages("littler")
